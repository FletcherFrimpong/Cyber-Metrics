[
  {
    "ruleId": "healthcare-hipaa-breach-001",
    "embedding": [
      0.513874614594039,
      0.10277492291880781,
      0.20554984583761562,
      0,
      0,
      1,
      0.3083247687564234,
      0.513874614594039,
      0.41109969167523125,
      0.10277492291880781,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10277492291880781,
      0,
      0,
      0,
      0
    ],
    "ruleName": "HIPAA Data Exfiltration Detection",
    "query": "// HIPAA Data Exfiltration Detection\nlet suspiciousKeywords = dynamic([\"patient\", \"medical\", \"diagnosis\", \"treatment\", \"prescription\", \"lab result\", \"x-ray\", \"mri\", \"ct scan\"]);\nlet externalDomains = dynamic([\"gmail.com\", \"yahoo.com\", \"outlook.com\", \"dropbox.com\", \"google.com\"]);\n\nimWebSession\n| where Url contains \"patient\" or Url contains \"medical\" or Url contains \"health\"\n| where DstDvcHostname in (externalDomains)\n| where EventResult == \"Success\"\n| extend DataSize = tolong(ResponseSize)\n| where DataSize > 1000000 // 1MB threshold\n| summarize \n    TotalDataExfiltrated = sum(DataSize),\n    SessionCount = count(),\n    DistinctURLs = dcount(Url),\n    ExternalDomains = make_set(DstDvcHostname),\n    UserAgents = make_set(UserAgent)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 1h)\n| where TotalDataExfiltrated > 5000000 // 5MB total threshold\n| extend RiskScore = case(\n    TotalDataExfiltrated > 10000000, 95,\n    TotalDataExfiltrated > 5000000, 85,\n    75\n)",
    "category": "Healthcare",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "financial-payment-card-002",
    "embedding": [
      0.5371530886302597,
      0.08952551477170993,
      0.17905102954341987,
      0,
      0,
      1,
      0.8952551477170994,
      0.7162041181736795,
      0.8057296329453895,
      0.08952551477170993,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08952551477170993,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Payment Card Data Theft Detection",
    "query": "// Payment Card Data Theft Detection\nlet cardPatterns = dynamic([\"\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b\", \"\\b\\d{3}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b\"]);\nlet sensitiveTables = dynamic([\"credit_cards\", \"payment_info\", \"transactions\", \"customer_data\", \"billing\"]);\n\nimDatabase\n| where DatabaseName contains \"payment\" or DatabaseName contains \"credit\" or DatabaseName contains \"billing\"\n| where Query contains \"SELECT\" and (Query contains \"credit\" or Query contains \"card\" or Query contains \"payment\")\n| where not(Query contains \"WHERE\" and Query contains \"LIMIT\" and Query contains \"1\")\n| extend RowCount = extract(\"SELECT.*?FROM.*?(\\d+)\", 1, Query)\n| where tolong(RowCount) > 1000\n| summarize \n    QueryCount = count(),\n    TotalRowsAccessed = sum(tolong(RowCount)),\n    DistinctQueries = dcount(Query),\n    DatabaseNames = make_set(DatabaseName),\n    UserNames = make_set(TargetUsername)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 30m)\n| where TotalRowsAccessed > 10000\n| extend RiskScore = case(\n    TotalRowsAccessed > 100000, 98,\n    TotalRowsAccessed > 50000, 90,\n    TotalRowsAccessed > 10000, 80\n)",
    "category": "Financial Services",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "energy-scada-attack-003",
    "embedding": [
      0.36363636363636365,
      0.09090909090909091,
      0.18181818181818182,
      0,
      0,
      0.8209090909090908,
      0,
      0.45454545454545453,
      1,
      0.09090909090909091,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09090909090909091,
      0,
      0,
      0,
      0
    ],
    "ruleName": "SCADA System Compromise Detection",
    "query": "// SCADA System Compromise Detection\nlet scadaPorts = dynamic([502, 20000, 44818, 2222, 9600, 5020]); // Modbus, DNP3, EtherNet/IP\nlet scadaCommands = dynamic([\"write\", \"control\", \"setpoint\", \"override\", \"emergency\", \"shutdown\"]);\n\nimNetworkSession\n| where DstPortNumber in (scadaPorts)\n| where not(SrcDvcIpAddr in (\"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\"))\n| extend IsExternal = case(\n    not(SrcDvcIpAddr in (\"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\")), 1,\n    0\n)\n| where IsExternal == 1\n| summarize \n    ConnectionCount = count(),\n    DistinctExternalIPs = dcount(SrcDvcIpAddr),\n    SCADAPorts = make_set(DstPortNumber),\n    ExternalIPs = make_set(SrcDvcIpAddr)\nby DstDvcIpAddr, bin(TimeGenerated, 5m)\n| where ConnectionCount > 5 and DistinctExternalIPs > 2\n| extend RiskScore = case(\n    DistinctExternalIPs > 10, 96,\n    DistinctExternalIPs > 5, 85,\n    DistinctExternalIPs > 2, 75\n)",
    "category": "Energy",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "manufacturing-espionage-004",
    "embedding": [
      0.4965243296921549,
      0.09930486593843098,
      0.19860973187686196,
      0,
      0,
      1,
      0.29791459781529295,
      0.4965243296921549,
      0.6951340615690169,
      0.09930486593843098,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09930486593843098,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Industrial Espionage Detection",
    "query": "// Industrial Espionage Detection\nlet sensitiveFileTypes = dynamic([\".dwg\", \".dxf\", \".step\", \".stp\", \".iges\", \".igs\", \".prt\", \".asm\", \".sldprt\", \".sldasm\"]);\nlet sensitiveKeywords = dynamic([\"patent\", \"design\", \"blueprint\", \"specification\", \"formula\", \"recipe\", \"process\"]);\n\nimFileEvent\n| where EventType == \"File accessed\" or EventType == \"File copied\" or EventType == \"File moved\"\n| where FileName endswith_any (sensitiveFileTypes)\n| where not(FilePath contains \"backup\" or FilePath contains \"archive\")\n| extend FileSize = tolong(FileSize)\n| where FileSize > 1000000 // 1MB threshold\n| summarize \n    FileAccessCount = count(),\n    TotalDataAccessed = sum(FileSize),\n    DistinctFiles = dcount(FileName),\n    FileTypes = make_set(FileExtension),\n    FilePaths = make_set(FilePath)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 1h)\n| where TotalDataAccessed > 50000000 // 50MB threshold\n| extend RiskScore = case(\n    TotalDataAccessed > 100000000, 90,\n    TotalDataAccessed > 50000000, 80,\n    70\n)",
    "category": "Manufacturing",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "retail-pos-breach-005",
    "embedding": [
      0.4,
      0.1,
      0.2,
      0,
      0,
      0.9410000000000001,
      0.3,
      0.9,
      1,
      0.1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1,
      0,
      0,
      0,
      0
    ],
    "ruleName": "POS System Compromise Detection",
    "query": "// POS System Compromise Detection\nlet posProcesses = dynamic([\"pos.exe\", \"payment.exe\", \"terminal.exe\", \"register.exe\"]);\nlet suspiciousProcesses = dynamic([\"cmd.exe\", \"powershell.exe\", \"wget.exe\", \"curl.exe\", \"nc.exe\"]);\n\nimProcess\n| where ProcessName in (suspiciousProcesses)\n| where ParentProcessName in (posProcesses)\n| extend ProcessCommandLine = coalesce(ProcessCommandLine, \"\")\n| where ProcessCommandLine contains \"http\" or ProcessCommandLine contains \"ftp\" or ProcessCommandLine contains \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"\n| summarize \n    SuspiciousProcessCount = count(),\n    DistinctProcesses = dcount(ProcessName),\n    CommandLines = make_set(ProcessCommandLine),\n    ParentProcesses = make_set(ParentProcessName)\nby SrcDvcIpAddr, bin(TimeGenerated, 10m)\n| where SuspiciousProcessCount > 2\n| extend RiskScore = case(\n    SuspiciousProcessCount > 10, 95,\n    SuspiciousProcessCount > 5, 85,\n    SuspiciousProcessCount > 2, 75\n)",
    "category": "Retail",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "education-student-data-006",
    "embedding": [
      0.38461538461538464,
      0.07692307692307693,
      0.15384615384615385,
      0,
      0,
      0.8023076923076923,
      0.5384615384615384,
      0.6923076923076923,
      1,
      0.07692307692307693,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07692307692307693,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Student Data Privacy Violation Detection",
    "query": "// Student Data Privacy Violation Detection\nlet studentDataKeywords = dynamic([\"student\", \"grade\", \"transcript\", \"enrollment\", \"attendance\", \"gpa\", \"ssn\", \"social security\"]);\nlet bulkAccessThreshold = 100;\n\nimDatabase\n| where DatabaseName contains \"student\" or DatabaseName contains \"academic\" or DatabaseName contains \"enrollment\"\n| where Query contains \"SELECT\" and Query contains_any (studentDataKeywords)\n| extend RowCount = extract(\"SELECT.*?FROM.*?(\\d+)\", 1, Query)\n| where tolong(RowCount) > bulkAccessThreshold\n| where not(TargetUsername contains \"admin\" or TargetUsername contains \"system\")\n| summarize \n    QueryCount = count(),\n    TotalRecordsAccessed = sum(tolong(RowCount)),\n    DistinctQueries = dcount(Query),\n    UserNames = make_set(TargetUsername),\n    DatabaseNames = make_set(DatabaseName)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 1h)\n| where TotalRecordsAccessed > 1000\n| extend RiskScore = case(\n    TotalRecordsAccessed > 10000, 85,\n    TotalRecordsAccessed > 5000, 75,\n    TotalRecordsAccessed > 1000, 65\n)",
    "category": "Education",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "government-classified-007",
    "embedding": [
      0.5454545454545454,
      0.09090909090909091,
      0.18181818181818182,
      0,
      0,
      0.9545454545454546,
      0.45454545454545453,
      0.8181818181818182,
      1,
      0.09090909090909091,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09090909090909091,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Classified Information Access Detection",
    "query": "// Classified Information Access Detection\nlet classifiedKeywords = dynamic([\"classified\", \"secret\", \"top secret\", \"confidential\", \"sci\", \"noforn\", \"fouo\"]);\nlet classifiedFileExtensions = dynamic([\".doc\", \".pdf\", \".ppt\", \".xls\", \".msg\", \".eml\"]);\n\nimFileEvent\n| where EventType == \"File accessed\" or EventType == \"File copied\"\n| where FileName contains_any (classifiedKeywords) or FilePath contains_any (classifiedKeywords)\n| where FileName endswith_any (classifiedFileExtensions)\n| where not(TargetUsername contains \"authorized\" or TargetUsername contains \"cleared\")\n| extend FileSize = tolong(FileSize)\n| where FileSize > 100000 // 100KB threshold\n| summarize \n    FileAccessCount = count(),\n    TotalDataAccessed = sum(FileSize),\n    DistinctFiles = dcount(FileName),\n    FilePaths = make_set(FilePath),\n    UserNames = make_set(TargetUsername)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 30m)\n| where FileAccessCount > 5\n| extend RiskScore = case(\n    FileAccessCount > 20, 97,\n    FileAccessCount > 10, 90,\n    FileAccessCount > 5, 80\n)",
    "category": "Government",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "hospitality-loyalty-008",
    "embedding": [
      0.38461538461538464,
      0.07692307692307693,
      0.15384615384615385,
      0,
      0,
      0.7676923076923077,
      0.5384615384615384,
      0.6923076923076923,
      1,
      0.07692307692307693,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07692307692307693,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Loyalty Program Data Breach Detection",
    "query": "// Loyalty Program Data Breach Detection\nlet loyaltyKeywords = dynamic([\"loyalty\", \"rewards\", \"points\", \"member\", \"customer\", \"guest\", \"reservation\"]);\nlet bulkThreshold = 500;\n\nimDatabase\n| where DatabaseName contains \"loyalty\" or DatabaseName contains \"customer\" or DatabaseName contains \"guest\"\n| where Query contains \"SELECT\" and Query contains_any (loyaltyKeywords)\n| extend RowCount = extract(\"SELECT.*?FROM.*?(\\d+)\", 1, Query)\n| where tolong(RowCount) > bulkThreshold\n| where not(TargetUsername contains \"admin\" or TargetUsername contains \"system\")\n| summarize \n    QueryCount = count(),\n    TotalRecordsAccessed = sum(tolong(RowCount)),\n    DistinctQueries = dcount(Query),\n    UserNames = make_set(TargetUsername),\n    DatabaseNames = make_set(DatabaseName)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 1h)\n| where TotalRecordsAccessed > 2000\n| extend RiskScore = case(\n    TotalRecordsAccessed > 10000, 80,\n    TotalRecordsAccessed > 5000, 70,\n    TotalRecordsAccessed > 2000, 60\n)",
    "category": "Hospitality",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "professional-client-data-009",
    "embedding": [
      0.5405405405405406,
      0.0900900900900901,
      0.1801801801801802,
      0,
      0,
      1,
      0.45045045045045046,
      0.45045045045045046,
      0.9009009009009009,
      0.0900900900900901,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0900900900900901,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Client Data Breach Detection",
    "query": "// Client Data Breach Detection\nlet clientKeywords = dynamic([\"client\", \"confidential\", \"attorney-client\", \"privileged\", \"legal\", \"contract\", \"agreement\"]);\nlet sensitiveExtensions = dynamic([\".doc\", \".pdf\", \".ppt\", \".xls\", \".msg\", \".eml\", \".zip\", \".rar\"]);\n\nimFileEvent\n| where EventType == \"File accessed\" or EventType == \"File copied\" or EventType == \"File moved\"\n| where FileName contains_any (clientKeywords) or FilePath contains_any (clientKeywords)\n| where FileName endswith_any (sensitiveExtensions)\n| where not(FilePath contains \"public\" or FilePath contains \"shared\")\n| extend FileSize = tolong(FileSize)\n| where FileSize > 500000 // 500KB threshold\n| summarize \n    FileAccessCount = count(),\n    TotalDataAccessed = sum(FileSize),\n    DistinctFiles = dcount(FileName),\n    FilePaths = make_set(FilePath),\n    UserNames = make_set(TargetUsername)\nby SrcDvcIpAddr, TargetUsername, bin(TimeGenerated, 1h)\n| where TotalDataAccessed > 10000000 // 10MB threshold\n| extend RiskScore = case(\n    TotalDataAccessed > 50000000, 85,\n    TotalDataAccessed > 20000000, 75,\n    TotalDataAccessed > 10000000, 65\n)",
    "category": "Professional Services",
    "platform": "Microsoft Sentinel"
  },
  {
    "ruleId": "ransomware-encryption-010",
    "embedding": [
      0.4700352526439483,
      0.11750881316098707,
      0.23501762632197415,
      0,
      0,
      1,
      0.11750881316098707,
      0.9400705052878966,
      0.23501762632197415,
      0.11750881316098707,
      0.11750881316098707,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11750881316098707,
      0,
      0,
      0,
      0
    ],
    "ruleName": "Ransomware Encryption Activity Detection",
    "query": "// Ransomware Encryption Activity Detection\nlet encryptionExtensions = dynamic([\".encrypted\", \".locked\", \".crypto\", \".crypt\", \".cryptolocker\", \".cryptowall\"]);\nlet suspiciousProcesses = dynamic([\"cmd.exe\", \"powershell.exe\", \"wscript.exe\", \"cscript.exe\", \"rundll32.exe\"]);\n\nimFileEvent\n| where EventType == \"File created\" or EventType == \"File modified\"\n| where FileName endswith_any (encryptionExtensions)\n| extend FileSize = tolong(FileSize)\n| where FileSize > 1000 // 1KB threshold\n| summarize \n    EncryptedFileCount = count(),\n    TotalEncryptedSize = sum(FileSize),\n    FileExtensions = make_set(FileExtension),\n    FilePaths = make_set(FilePath)\nby SrcDvcIpAddr, bin(TimeGenerated, 5m)\n| where EncryptedFileCount > 10\n| extend RiskScore = case(\n    EncryptedFileCount > 100, 95,\n    EncryptedFileCount > 50, 90,\n    EncryptedFileCount > 10, 85\n)",
    "category": "Ransomware",
    "platform": "Microsoft Sentinel"
  }
]